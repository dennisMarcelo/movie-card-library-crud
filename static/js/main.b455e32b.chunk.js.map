{"version":3,"sources":["components/Header.jsx","components/MovieCard.jsx","components/Loading.jsx","services/movieData.js","services/movieAPI.js","pages/MovieList.jsx","components/MovieForm.jsx","pages/NewMovie.jsx","pages/MovieDetails.jsx","pages/EditMovie.jsx","pages/NotFound.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","MovieCard","this","props","movie","id","title","storyline","imagePath","data-testid","style","backgroundImage","to","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","MovieList","FeachMovies","setState","loading","a","state","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","Number","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","NewMovie","redirect","newMovie","movieData","nextId","length","MovieDetails","getMovieDetails","movieAPI","match","params","CutImage","slice","alt","src","filter","status","EditMovie","shouldRedirect","updatedMovie","NotFound","Main","exact","path","component","App","basename","process","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b455e32b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"Header\">\n        NETGAMES\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline, imagePath } } = this.props;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <div\n          className=\"background-card\"\n          style={ { backgroundImage: `url(${imagePath})` } }\n        >\n          <h1>{title}</h1>\n        </div>\n\n        <p>{storyline}</p>\n        <div className=\"more-information\">\n          <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <h3 className=\"loding\">Carregando...</h3>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: null,\n    };\n  }\n\n  componentDidMount() {\n    this.FeachMovies();\n  }\n\n  FeachMovies = () => {\n    this.setState({ loading: true }, async () => {\n      const response = await movieAPI.getMovies();\n      this.setState({\n        movies: response,\n        loading: false,\n      });\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    return (\n      <div data-testid=\"movie-list\">\n        <div className=\"box-controler-movie-list\">\n          <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        </div>\n        <div className=\"movie-list\">\n          {loading\n            ? <Loading />\n            : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', Number(event.target.value)) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <form>\n        {this.renderTitleInput()}\n        {this.renderSubtitleInput()}\n        {this.renderImagePathInput()}\n        {this.renderStorylineInput()}\n        {this.renderGenreSelection()}\n        {this.renderRatingInput()}\n        {this.renderSubmitButton()}\n      </form>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const newMovie = {\n      title: '',\n      subtitle: '',\n      storyline: '',\n      rating: 0,\n      imagePath: '',\n      genre: '',\n    };\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"new-movie\" className=\"form-container\">\n        <MovieForm onSubmit={ this.handleSubmit } movie={ newMovie } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: null,\n      title: '',\n      storyline: '',\n      imagePath: '',\n      genre: '',\n      rating: null,\n      subtitle: '',\n    };\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    this.getMovieDetails(id);\n  }\n\n  getMovieDetails = (id) => {\n    this.setState({ loading: true }, async () => {\n      const response = await movieAPI.getMovie(id);\n      this.setState({\n        loading: false,\n        id,\n        title: response.title,\n        storyline: response.storyline,\n        imagePath: response.imagePath,\n        genre: response.genre,\n        rating: response.rating,\n        subtitle: response.subtitle,\n      });\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      title,\n      storyline,\n      imagePath,\n      genre,\n      rating,\n      subtitle,\n      id } = this.state;\n\n    const FINAL_NUMBER = 4;\n    const CutImage = imagePath.slice(0, FINAL_NUMBER);\n\n    if (loading === true) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"movie-details\">\n        <div className=\"card-datails\">\n          <header className=\"header-movie-details\">\n            <img\n              alt=\"Movie Cover\"\n              src={ CutImage === 'http'\n                ? imagePath\n                : `../${imagePath}` }\n            />\n            <p>{ ` ${title}` }</p>\n          </header>\n          <div className=\"descriptions-movie-details\">\n            <p>{ `Subtitle: ${subtitle}` }</p>\n            <p>{ `Storyline: ${storyline}` }</p>\n            <p>{ `Genre: ${genre}` }</p>\n            <p>{ `Rating: ${rating}` }</p>\n          </div>\n          <div className=\"options-movie-details\">\n            <button type=\"button\">\n              <Link to={ `/movies/${id}/edit` }>\n                EDITAR\n              </Link>\n            </button>\n            <button type=\"button\">\n              <Link to=\"/\">\n                VOLTAR\n              </Link>\n            </button>\n            <button\n              type=\"button\"\n              onClick={ () => movieAPI.deleteMovie(id) }\n            >\n              <Link to=\"/\">\n                DELETAR\n              </Link>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      shouldRedirect: false,\n      movie: {},\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    this.getMovieDetails(id);\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  getMovieDetails = (id) => {\n    this.setState({ loading: true }, async () => {\n      const response = await movieAPI.getMovie(id);\n      this.setState({\n        loading: false,\n        movie: response,\n      });\n    });\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading === true) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"form-container\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div\n        data-testid=\"404-error\"\n        className=\"PageNotFound\"\n      >\n        <h1>404</h1>\n        Página não encontrada\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport MovieList from '../pages/MovieList';\nimport NewMovie from '../pages/NewMovie';\nimport MovieDetails from '../pages/MovieDetails';\nimport EditMovie from '../pages/EditMovie';\nimport NotFound from '../pages/NotFound';\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={ MovieList } />\n          <Route path=\"/movies/new\" component={ NewMovie } />\n          <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n          <Route path=\"/movies/:id\" component={ MovieDetails } />\n          <Route path=\"/404\" component={ NotFound } />\n          <Route path=\"\">\n            <Redirect to=\"/404\" />\n          </Route>\n        </Switch>\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <Router basename={ process.env.PUBLIC_URL }>\n      <Header />\n      <Main />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}